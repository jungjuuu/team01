<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper-team01">

	<!-- 판매자 정보 조회 -->
	<select id="getSellerByNo"
		resultType="com.cream.team01.vo.SellerVO">
		SELECT seller_no, brand_name, seller_mobile
		FROM sellers
		WHERE seller_no = #{sellerNo}
	</select>



	<!-- 카테고리 번호에 따른 상품 목록을 조회 -->
	<select id="getProductsByCategory" parameterType="int"
		resultType="com.cream.team01.vo.ProductVO">
		SELECT product_no, product_name, product_image,
		product_price, category_no,
		seller_no
		FROM products
		WHERE category_no =
		#{categoryNo}
	</select>

	<select id="getProductByNo"
		resultType="com.cream.team01.vo.ProductVO">
		SELECT * FROM products WHERE product_no = #{productNo}
	</select>

	<!-- productWithCategoryResultMap을 정의하여 ProductVO와 CategoryVO를 매핑 -->
	<resultMap id="productWithCategoryResultMap"
		type="com.cream.team01.vo.ProductVO">
		<!-- ProductVO의 필드 매핑 -->
		<id property="productNo" column="product_no" />
		<result property="productName" column="product_name" />
		<result property="productImage" column="product_image" />
		<result property="productPrice" column="product_price" />
		<result property="sellerNo" column="seller_no" />

		<!-- CategoryVO와의 연관 관계 설정 -->
		<association property="category"
			javaType="com.cream.team01.vo.CategoryVO">
			<id property="categoryNo" column="category_no" />
			<result property="categoryName" column="category_name" />
		</association>
	</resultMap>

	<!-- 판매자의 등록된 상품 조회 -->
	<select id="getProductsBySeller" parameterType="int"
		resultMap="productWithCategoryResultMap">
		SELECT
		p.product_no,
		p.product_name,
		p.product_image,
		p.product_price,
		p.seller_no,
		c.category_no,
		c.category_name
		FROM products
		p
		JOIN categories c ON p.category_no = c.category_no
		WHERE p.seller_no =
		#{sellerNo}
	</select>



	<!-- 상품 추가 -->
	<insert id="addProduct"
		parameterType="com.cream.team01.vo.ProductVO">
		INSERT INTO products (product_name, product_price,
		category_no, seller_no,
		product_image)
		VALUES (#{productName},
		#{productPrice}, #{categoryNo}, #{sellerNo},
		#{productImage})
	</insert>

	<!-- 상품 수정 -->
	<update id="updateProduct"
		parameterType="com.cream.team01.vo.ProductVO">
		UPDATE products
		SET product_name = #{productName},
		product_price = #{productPrice},
		category_no = #{categoryNo},
		product_image = #{productImage}
		WHERE product_no = #{productNo}
	</update>

	<!-- 상품 삭제 -->
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM products
		WHERE product_no = #{productNo}
	</delete>
	<!-- 카테고리 이름 받아오는 쿼리 -->
	<select id="getCategoryNameByNo" parameterType="int"
		resultType="com.cream.team01.vo.CategoryVO">
		SELECT category_no, category_name
		FROM categories
		WHERE
		category_no = #{categoryNo}
	</select>
	<!-- 메인에서 최신순 정렬 -->
	<select id="getNewProducts"
		resultType="com.cream.team01.vo.ProductVO">
		SELECT * FROM products
		ORDER BY product_no DESC
	</select>

	<!-- 좋아요순으로 상품 조회 -->
	<select id="getPopularProducts"
		resultType="com.cream.team01.vo.ProductVO">
		SELECT p.*,
		(SELECT COUNT(*) FROM likes WHERE product_no =
		p.product_no) AS likes_count
		FROM products p
		ORDER BY likes_count DESC
	</select>

	<!-- 카테고리에서 최신순 정렬 -->
	<select id="getProductsByCategorySortedByRecent"
		parameterType="int" resultType="com.cream.team01.vo.ProductVO">
		SELECT *
		FROM products
		WHERE category_no
		= #{categoryNo}
		ORDER BY product_no DESC
	</select>

	<!-- 카테고리에서 높은 가격순 정렬 -->
	<select id="getProductsByCategorySortedByHighPrice"
		parameterType="int" resultType="com.cream.team01.vo.ProductVO">
		SELECT *
		FROM products
		WHERE category_no
		= #{categoryNo}
		ORDER BY product_price DESC
	</select>

	<!-- 카테고리에서 낮은 가격순 정렬 -->
	<select id="getProductsByCategorySortedByLowPrice"
		parameterType="int" resultType="com.cream.team01.vo.ProductVO">
		SELECT *
		FROM products
		WHERE category_no
		= #{categoryNo}
		ORDER BY product_price ASC
	</select>

	<!-- 카테고리에서 좋아요순 정렬 -->
	<select id="getProductsByCategorySortedByLikes"
		parameterType="int" resultType="com.cream.team01.vo.ProductVO">
		SELECT p.*,
		(SELECT COUNT(*) FROM likes
		WHERE product_no = p.product_no) AS likes_count
		FROM products p
		WHERE
		p.category_no = #{categoryNo}
		ORDER BY likes_count DESC
	</select>

	<!-- ID로 회원 정보 조회 -->
	<select id="selectAccount" parameterType="String"
		resultType="com.cream.team01.vo.AccountVO">
		SELECT *
		FROM accounts
		WHERE account_id = #{accountId}

	</select>

	<!-- accountNo로 memberNo 가져오기 -->
	<select id="getMemberNoByAccountNo" parameterType="int"
		resultType="int">
		SELECT member_no
		FROM MEMBERS
		WHERE account_no = #{accountNo}
	</select>

	<!-- accountNo로 sellerNo 가져오기 -->
	<select id="getSellerNoByAccountNo" parameterType="int"
		resultType="int">
		SELECT seller_no
		FROM SELLERS
		WHERE account_no = #{accountNo}
	</select>


	<!-- 이름과 전화번호로 아이디 찾기 -->
	<select id="findId" parameterType="com.cream.team01.vo.MemberVO"
		resultType="com.cream.team01.vo.AccountVO">
		SELECT a.account_id
		FROM accounts a
		JOIN members m ON
		m.account_no =
		a.account_no
		WHERE m.member_name = #{memberName}
		AND
		m.member_mobile =
		#{memberMobile}
	</select>

	<!-- 아이디과 전화번호로 비밀번호 찾기 -->
	<select id="findPassword"
		parameterType="com.cream.team01.vo.MemberVO"
		resultType="com.cream.team01.vo.AccountVO">
		SELECT a.account_password
		FROM accounts a
		JOIN members m ON
		m.account_no = a.account_no
		WHERE a.account_id = #{memberName}
		AND
		m.member_mobile = #{memberMobile}
	</select>

	<!-- 비밀번호 재설정 -->
	<update id="updatePassword"
		parameterType="com.cream.team01.vo.AccountVO">
		UPDATE accounts
		SET account_password = #{accountPassword}
		WHERE account_id = #{accountId}
	</update>


	<!-- 회원 가입 id, password -->
	<insert id="createAccount"
		parameterType="com.cream.team01.vo.AccountVO" useGeneratedKeys="true"
		keyProperty="accountNo">
		INSERT INTO accounts (account_id, account_password)
		VALUES
		(#{accountId}, #{accountPassword});
	</insert>

	<!-- 멤버 회원가입 -->
	<insert id="createMember"
		parameterType="com.cream.team01.vo.MemberVO">
		INSERT INTO members (member_name, member_age,
		member_mobile, member_address,
		account_no)
		VALUES (#{memberName},
		#{memberAge}, #{memberMobile},
		#{memberAddress},#{accountNo});
	</insert>

	<!-- 브랜드 회원가입 -->
	<insert id="createBrand"
		parameterType="com.cream.team01.vo.SellerVO">
		INSERT INTO sellers (brand_name, seller_mobile,
		account_no)
		VALUES (#{brandName}, #{sellerMobile}, #{accountNo});
	</insert>

	<!-- 결제페이지 멤버 정보 가져오기 -->
	<select id="getMemberInfo"
		parameterType="com.cream.team01.vo.MemberVO"
		resultType="com.cream.team01.vo.MemberVO">
		select * from members where member_no = #{memberNo}
	</select>

	<!-- 회원 주문 내역 가져오기 -->
	<select id="getOrderListByMemberNo" parameterType="int"
		resultType="com.cream.team01.vo.OrderVO">
		select * from order_details od join orders o on od.order_no
		= o.order_no join products p on od.product_no = p.product_no where
		o.member_no = #{memberNo};
	</select>

	<!-- 좋아요 여부 확인 -->
	<select id="checkLike"
		parameterType="com.cream.team01.vo.LikeVO" resultType="int">
		SELECT COUNT(*)
		FROM likes
		WHERE product_no = #{productNo}
		AND member_no = #{memberNo}
	</select>

	<!-- 좋아요 추가 -->
	<insert id="addLike" parameterType="com.cream.team01.vo.LikeVO">
		INSERT INTO likes
		(product_no, member_no)
		VALUES (#{productNo}, #{memberNo})
	</insert>

	<!-- 좋아요 삭제 -->
	<delete id="removeLike"
		parameterType="com.cream.team01.vo.LikeVO">
		DELETE FROM likes
		WHERE product_no = #{productNo}
		AND
		member_no = #{memberNo}
	</delete>

	<!-- 좋아요 개수 조회 -->
	<select id="getLikesCount" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM likes WHERE product_no = #{productNo};
	</select>

	<!-- 결제시 주문내역에 추가 -->
	<insert id="addOrder"
		parameterType="com.cream.team01.vo.OrderVO" useGeneratedKeys="true"
		keyProperty="orderNo">
		insert into orders (order_date, member_no) values (now(),
		#{memberNo});
	</insert>

	<!-- 주문내역추가 후 주문상세내역 추가 -->
	<insert id="addOrderDetail"
		parameterType="com.cream.team01.vo.OrderVO">
		insert into order_details (order_quantity, order_price,
		order_no, product_no) values (#{orderQuantity}, #{orderPrice},
		#{orderNo}, #{productNo})
	</insert>





	<!-- 장바구니 아이템 리스트 불러오기 -->
	<select id="getCartItems"
		parameterType="com.cream.team01.vo.MemberVO"
		resultType="com.cream.team01.vo.CartVO">
		select * from cart_details cd
		join products p on
		cd.product_no = p.product_no join carts c on
		cd.cart_no = c.cart_no
		where member_no = #{memberNo};
	</select>


	<!-- 장바구니에 추가 -->
	<insert id="addCartItem"
		parameterType="com.cream.team01.vo.CartVO" useGeneratedKeys="true"
		keyProperty="cartNo">
		insert into carts (member_no) values (#{memberNo});
	</insert>

	<!-- 장바구니 상세에 추가 -->
	<insert id="addCartDetail"
		parameterType="com.cream.team01.vo.CartVO">
		insert into cart_details (product_no, cart_no) values
		(#{productNo}, #{cartNo});
	</insert>


	<!-- 회원의 장바구니 여부확인 -->
	<select id="getCartByMemberNo" parameterType="int"
		resultType="com.cream.team01.vo.CartVO">
		select * from carts where member_no = #{memberNo};
	</select>



	<!-- 장바구니에서 구매한 상품 삭제 -->
	<delete id="deleteCartItems"
		parameterType="com.cream.team01.vo.CartVO">
		delete cd from cart_details cd join carts c on
		cd.cart_no = c.cart_no where c.member_no = #{memberNo} and
		cd.product_no = #{productNo};
	</delete>



	<!-- 문의 게시판 내역 불러오기 -->
	<select id="memberBoardList"
		parameterType="com.cream.team01.vo.BoardVO"
		resultType="com.cream.team01.vo.BoardVO">
		SELECT *
		FROM inquiry_board
		WHERE inquiry_no = #{inquiryNo},
		inquiry_title = #{inquiryTitle},
		inquiry_content = #{inquiryContent},
		inquiry_date = #{inquiryDate}
	</select>

	<!-- 회원이 좋아요한 상품 목록 조회 -->
	<select id="getLikedProductsByMemberNo" parameterType="int"
		resultType="com.cream.team01.vo.ProductVO">
		SELECT p.product_no, p.product_name, p.product_image,
		p.product_price
		FROM likes l
		JOIN products p ON l.product_no =
		p.product_no
		WHERE l.member_no = #{memberNo};
	</select>

	<!-- 문의 리스트 불러오기 -->
	<select id="getMemberInquiries"
		resultType="com.cream.team01.vo.BoardVO">
		SELECT
		inquiry_no,
		inquiry_title,
		inquiry_content,
		inquiry_date,
		m.member_name
		FROM inquiry_board ib
		JOIN members m ON
		ib.member_no = m.member_no
	</select>

	<select id="getMemberNameByMemberNo" parameterType="int"
		resultType="String">
		SELECT member_name
		FROM members
		WHERE member_no = #{memberNo}
	</select>

	<insert id="addMemberInquiryWrite"
		parameterType="com.cream.team01.vo.BoardVO">
		INSERT INTO inquiry_board (inquiry_title,
		inquiry_content,
		inquiry_date, member_no, seller_no)
		VALUES (
		#{inquiryTitle},
		#{inquiryContent},
		NOW(),
		#{memberNo},
		(SELECT seller_no
		FROM products WHERE product_no = #{productNo})
		);
	</insert>

	<update id="editMember"
		parameterType="com.cream.team01.vo.MemberVO">
		update members set member_name = #{memberName},
		member_age = #{memberAge},
		member_mobile = #{memberMobile},
		member_address = #{memberAddress} where member_no = #{memberNo};
	</update>

	<delete id="deleteMember" parameterType="int">
		DELETE FROM members WHERE member_no = #{memberNo};
	</delete>

	<delete id="deleteAccountByMemberNo" parameterType="int">
		 DELETE FROM accounts WHERE account_no = #{accountNo};
	</delete>

</mapper>